name: Dev Release (Image Only)

on:
  push:
    branches:
      - dev
      - cicd-pipelines

concurrency:
  group: dev-release
  cancel-in-progress: false

permissions:
  contents: read
  packages: write   # needed for GHCR push

env:
  JAVA_VERSION: '21'
  IMAGE_NAME: ghcr.io/${{ github.repository }}/todo-api

jobs:
  verify:
    name: Build & Test (gate)
    runs-on: ubuntu-latest

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    # ğŸ‘‡ expose the computed tag as a job output
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build & Test
        run: mvn -B -DskipTests=false verify

      - name: Compute image tag
        id: meta
        run: echo "tag=dev-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

  docker:
    name: Build & Push Docker (GHCR)
    runs-on: ubuntu-latest
    needs: verify

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.verify.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:dev-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dummy_pull:
    name: Dummy Deploy (pull & smoke-check image on runner)
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Pull fresh image
        run: docker pull ${{ env.IMAGE_NAME }}:dev-latest

      - name: Run container briefly (dev profile) and health check
        run: |
          docker run -d --name todo-api-ci -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=dev \
            ${{ env.IMAGE_NAME }}:dev-latest
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null; then
              echo "Health OK"; OK=1; break
            fi
            echo "Waiting for app... ($i/30)"; sleep 2
          done
          docker logs todo-api-ci || true
          docker stop todo-api-ci >/dev/null 2>&1 || true
          docker rm todo-api-ci >/dev/null 2>&1 || true
          test "${OK:-0}" -eq 1
